import socket,threading,json,random,os,time,uuid
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.bind(("0.0.0.0",7777))
server.listen()
allc={}
lock_states={}
pwd_manager={}

def lock_(pwd):
    songs_X=os.listdir("sounds")
    songs=[]
    for x in songs_X.copy():
        if "mp3" in str(x):
            songs.append(x)
    i=-1
    while lock_states[pwd]['status']:
        time.sleep(3)
        i+=1
        c_i=i%len(songs)
        for x in lock_states[pwd]['clients']:
            x.send(json.dumps({"type":"lock","song":c_i,"pwd":pwd_manager[x][0][:6],"color":lock_states[pwd]["color"]}).encode())

def con_handler(client):
    global allc,lock_states,pwd_manager
    try:
        while True:
            data=client.recv(1024).decode()
            if data=="":raise Exception("Empty String")
            data=json.loads(data)
            if data['data']=="test" and len(allc)>1:
                pwd=str(uuid.uuid4())
                hx="#"+hex(random.randint(0,1600000))[2:]
                free=None
                for y in allc:
                    if y!=client:
                        if allc[y]['free']:
                            free=y
                            break
                lock_states[pwd]={"status":True,"clients":[client,free],"color":hx}
                for x in lock_states[pwd]["clients"]:
                    c_uid=str(uuid.uuid4())
                    pwd_manager[x]=c_uid[6:],pwd
                    allc[x]['free']=False
                threading.Thread(target=lock_,args=(pwd,)).start()
            elif data['type']=="check":
                if data['data']==pwd_manager[client][0][:6]:
                    print("dekh rha")
                    lock_states[pwd_manager[client][1]]
                    cl_clients=lock_states[pwd_manager[client][1]]['clients']
                    lock_states[pwd_manager[client][1]]={"status":False,"clients":[]}
                    for x in cl_clients:
                        x.send(json.dumps({"type":"unlock"}).encode())
                        allc[x]['free']=True
    except:
        import traceback
        traceback.print_exc()
        print(allc[client]['addr'],"disconnected")
        del allc[client]

def random_pop():
    global allc,lock_states,pwd_manager
    delay=3
    while True:
        time.sleep(delay)
        free=None
        for x in allc:
            if allc[x]['free']:
                free=x
                break
        client=free
        if client==None:
            continue
        pwd=str(uuid.uuid4())
        hx="#"+hex(random.randint(0,1600000))[2:]
        free=None
        for y in allc:
            if y!=client:
                if allc[y]['free']:
                    free=y
                    break
        if free==None:
            continue
        lock_states[pwd]={"status":True,"clients":[client,free],"color":hx}
        for x in lock_states[pwd]["clients"]:
            c_uid=str(uuid.uuid4())
            pwd_manager[x]=c_uid[6:],pwd
            allc[x]['free']=False
        threading.Thread(target=lock_,args=(pwd,)).start()
threading.Thread(target=random_pop).start()
while True:
    client,addr=server.accept()
    print(addr,"connected")
    allc[client]={"addr":addr,"free":True}
    threading.Thread(target=con_handler,args=(client,)).start()